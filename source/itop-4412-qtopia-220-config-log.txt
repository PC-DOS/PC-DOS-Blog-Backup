[[toc]]

+ 设备和软件基本信息

开发板为迅为iTop-4412精英版（Elite），核心板采用SCP封装，1 GB内存。

开发计算机操作系统为Windows 8 Enterprise x64，在VMware Workstation Pro 15.5中运行64位Ubuntu 12.04.5 LTS系统。Ubuntu登录用户名为{{picsell-dois}}。

为便于操作，已将iTop-4412随附光盘内的文件挂载共享目录到Ubuntu的{{/mnt/hgfs/Shared/}}目录内的“iTOP-4412精英版光盘资料”文件夹。

+ 进入Root操作环境

为便于操作，进入Root操作环境。首先在Ubuntu终端中输入指令：

[[code]]
sudo passwd
[[/code]]

指定Root密码，随后输入指令：

[[code]]
su
[[/code]]

进入Root操作环境。

若无特殊说明，以下操作均在Root操作环境下进行。

+ 配置所需的ARM编译器及环境变量

Qtopia 2.2.0源代码使用arm-linux-4.4.1编译器编译，因此需要进行编译器配置：

[[code]]
cd /usr/local/arm/
cp '/mnt/hgfs/Shared/iTOP-4412精英版光盘资料/08_源码_QtE以及qtopia2.2.0文件系统/arm-linux-4.4.1.tar.gz' ./
tar -vxf arm-linux-4.4.1.tar.gz
[[/code]]

配置环境变量：

[[code]]
sudo gedit /root/.bashrc
[[/code]]

通过在行首添加井号（“{{#}}”）的方式注释掉先前添加的其他编译器环境变量行（即{{export PATH=$PATH:/usr/local/arm/...}}这样的行），并在文件末尾添加：

[[code]]
#Compiler path for Qtopia 2.2.0
export PATH=$PATH:/usr/local/arm/4.4.1/bin
[[/code]]

保存并退出，回到终端并更新环境变量：

[[code]]
source /root/.bashrc
[[/code]]

随后安装X11 SDK：

[[code]]
apt-get install libx11-dev libxext-dev libxtst-dev
[[/code]]

可以通过在终端键入{{arm-none-linux-gnueabi-gcc -v}}指令并按回车键执行的方式，检查编译器版本。

+ 配置Qtopia 2.2.0编译环境

++ 先导工作

前期工作需要借用Android 4.0.3的配置编译环境中的安装脚本，安装大量的程序包，和Android 4.0.3编译环境不同，可以不执行安装Java的脚本：

[[code]]
cd /home/picsell-dois/
mkdir iTop4412
cd iTop4412
cp '/mnt/hgfs/Shared/iTOP-4412精英版光盘资料/02_编译器及烧写工具/tools/Android_JDK.tar.bz2' ./
tar -vxf Android_JDK.tar.bz2
cd Android_JDK
./install-devel-packages.sh
[[/code]]

可以再次执行{{./install-devel-packages.sh}}来确保程序包安装完整。

对于笔者使用的Ubuntu 12.04.5 LTS系统，须重新安装xorg以及libgl1-mesa库，否则重启虚拟机后可能无法进入图形界面：

[[code]]
apt-get install xorg
apt-get install libgl1-mesa-glx:i386
apt-get install libgl1-mesa-dev
[[/code]]

请注意，以上代码块中提供的三行{{apt-get install}}指令是针对笔者使用的Ubuntu 12.04.5 LTS系统的，目的是修复执行{{./install-devel-packages.sh}}（这个脚本是针对Ubuntu 12.04.2 LTS编写的）时由于程序包冲突而被破坏的图形环境，并安装编译所需的正确的库。

如果您使用的是Ubuntu 12.04.2 LTS系统，那么只需要执行{{./install-devel-packages.sh}}安装随iTop-4412光盘提供的脚本即可，千万不要执行上代码块中提供的三行{{apt-get install}}指令，否则您的操作系统将无法启动到图形界面。

最后，依次执行：

[[code]]
apt-get install gcc-4.4 g++-4.4 g++-4.4-multilib gcc-4.4-multilib
update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.4 100
update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.6 50
update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.4 100
update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.6 50
update-alternatives --install /usr/bin/cpp cpp-bin /usr/bin/cpp-4.4 100
update-alternatives --install /usr/bin/cpp cpp-bin /usr/bin/cpp-4.6 50
[[/code]]

降低Ubuntu系统自带的GCC版本到4.4.7，在终端输入{{gcc -v}}指令并按回车键执行，即可检查GCC版本。

[[collapsible show="▶ 关于install-devel-packages.sh" hide="▼ 关于install-devel-packages.sh"]]
随iTop-4412光盘提供的{{install-devel-packages.sh}}的文件内容如下：

[[code]]
#!/bin/bash

####################################################################
# Warning:
# Ubuntu 12.04.2 introduced a new X stack that isn't compatible with
# with the old glx packages.

# ------------------------------------------------------------------
# 12.04                --> 12.04.2 (*-lts-quantal)
# ------------------------------------------------------------------
# libgl1-mesa-glx:i386 --> libgl1-mesa-glx-lts-quantal:i386
# libgl1-mesa-dev      --> libgl1-mesa-dev-lts-quantal
# ------------------------------------------------------------------
#
# DON'T install libgl1-mesa-glx:i386 on 12.04.2, else it will *BREAK*
# your system.
####################################################################

# Execute an action
FA_DoExec() {
    echo "==> Executing: '${@}'"
    eval $@ || exit $?
}

# Ubuntu 12.04.2 LTS
FA_DoExec apt-get install \
    git gnupg flex bison gperf build-essential \
    zip curl libc6-dev libncurses5-dev x11proto-core-dev \
    libx11-dev:i386 libreadline6-dev:i386 \
    libgl1-mesa-glx-lts-quantal:i386 libgl1-mesa-dev-lts-quantal \
    g++-multilib mingw32 tofrodos lib32ncurses5-dev \
    python-markdown libxml2-utils xsltproc zlib1g-dev:i386

if [ ! -h /usr/lib/i386-linux-gnu/libGL.so ]; then
    FA_DoExec ln -s /usr/lib/i386-linux-gnu/mesa/libGL.so.1 \
        /usr/lib/i386-linux-gnu/libGL.so
fi

# Development support
FA_DoExec apt-get install \
    vim dos2unix minicom gawk
[[/code]]

由此可知，由于Ubuntu 12.04.2 LTS修改了用于图形界面的X程序堆栈，因此{{libgl1-mesa-glx:i386}}和{{libgl1-mesa-dev}}两个库需要使用等价的{{libgl1-mesa-glx-lts-quantal:i386}}和{{libgl1-mesa-dev-lts-quantal}}进行替换。

但是，实验显示，在Ubuntu 12.04.5 LTS中，试图安装{{libgl1-mesa-glx-lts-quantal:i386}}和{{libgl1-mesa-dev-lts-quantal}}两个库会导致图形环境遭到破坏，反而需要使用{{libgl1-mesa-glx:i386}}和{{libgl1-mesa-dev}}两个库。

因此，在Ubuntu 12.04.5 LTS上执行时，可以用以下内容替换{{install-devel-packages.sh}}文件的原始内容，以安装正确的程序包：

[[code]]
#!/bin/bash

####################################################################
# Warning:
# Ubuntu 12.04.2 introduced a new X stack that isn't compatible with
# with the old glx packages.

# ------------------------------------------------------------------
# 12.04                --> 12.04.2 (*-lts-quantal)
# ------------------------------------------------------------------
# libgl1-mesa-glx:i386 --> libgl1-mesa-glx-lts-quantal:i386
# libgl1-mesa-dev      --> libgl1-mesa-dev-lts-quantal
# ------------------------------------------------------------------
#
# DON'T install libgl1-mesa-glx:i386 on 12.04.2, else it will *BREAK*
# your system.
#
# In Ubuntu 12.04.5 LTS, please use libgl1-mesa-glx:i386 and libgl1-
# mesa-dev.
####################################################################

# Execute an action
FA_DoExec() {
    echo "==> Executing: '${@}'"
    eval $@ || exit $?
}

# Ubuntu 12.04.5 LTS
FA_DoExec apt-get install \
    git gnupg flex bison gperf build-essential \
    zip curl libc6-dev libncurses5-dev x11proto-core-dev \
    libx11-dev:i386 libreadline6-dev:i386 \
    libgl1-mesa-glx:i386 libgl1-mesa-dev \
    g++-multilib mingw32 tofrodos lib32ncurses5-dev \
    python-markdown libxml2-utils xsltproc zlib1g-dev:i386

if [ ! -h /usr/lib/i386-linux-gnu/libGL.so ]; then
    FA_DoExec ln -s /usr/lib/i386-linux-gnu/mesa/libGL.so.1 \
        /usr/lib/i386-linux-gnu/libGL.so
fi

# Development support
FA_DoExec apt-get install \
    vim dos2unix minicom gawk
[[/code]]
[[/collapsible]]

++ 补充库文件

通过以下指令序列，配置Qtoptia 2.2.0所需的库文件：

[[code]]
cd '/mnt/hgfs/Shared/iTOP-4412精英版光盘资料/08_源码_QtE以及qtopia2.2.0文件系统/patch/'
cp ./tslib.tar.gz /usr/local/arm/
cd /usr/local/arm/
tar -vxf tslib.tar.gz
cd '/mnt/hgfs/Shared/iTOP-4412精英版光盘资料/08_源码_QtE以及qtopia2.2.0文件系统/patch/'
cp ./libXext.so.6.4.0 /usr/lib32/
cp ./libXmu.so.6.2.0 /usr/lib32/
cp ./libSM.so.6.0.1 /usr/lib32/
cp ./libICE.so.6.3.0 /usr/lib32/
cp ./libXt.so.6.0.0 /usr/lib32/
cd /usr/lib32/
ln -s libXext.so.6.4.0 libXext.so.6
ln -s libXext.so.6 libXext.so
ln -s libXmu.so.6.2.0 libXmu.so.6
ln -s libXmu.so.6 libXmu.so
ln -s libSM.so.6.0.1 libSM.so.6
ln -s libSM.so.6 libSM.so
ln -s libICE.so.6.3.0 libICE.so.6
ln -s libICE.so.6 libICE.so
ln -s libXt.so.6.0.0 libXt.so.6
ln -s libXt.so.6 libXt.so
cd '/mnt/hgfs/Shared/iTOP-4412精英版光盘资料/08_源码_QtE以及qtopia2.2.0文件系统/patch/'
cp ./libuuid.so.1.3.0 /lib32/
cd /lib32/
ln -s libuuid.so.1.3.0 libuuid.so.1
ln -s libuuid.so.1 libuuid.so
[[/code]]

++ 安装生成系统镜像文件所需的工具

为了生成系统镜像{{system.img}}，需要安装mkimage工具：

[[code]]
cd '/mnt/hgfs/Shared/iTOP-4412精英版光盘资料/02_编译器以及烧写工具/tools/'
cp ./linux_tools.tgz /
cd /
tar -vxf linux_tools.tgz
[[/code]]

至此，Qtopia 2.2.0编译和镜像构建环境搭建完毕。

+ 复制和展开Qtopia 2.2.0源代码

继续使用Root身份操作，在{{/root/}}目录下建立{{yizhi}}目录，请注意，建议不要使用别的目录名称。

随后，复制ARM版本的Qtopia源码文件并展开：

[[code]]
cd /root/
mkdir yizhi
cd yizhi
cp '/mnt/hgfs/Shared/iTOP-4412精英版光盘资料/08_源码_QtE以及qtopia2.2.0文件系统/ARM-qtopia-free-src-2.2.0.tar.gz' ./
tar -vxf ARM-qtopia-free-src-2.2.0.tar.gz
[[/code]]

+ 编译Qtopia 2.2.0源代码

建议再次检查各环环境配是否正确，并确保当前位于{{/root/yizhi/}}目录内，运行编译脚本：

[[code]]
cd /root/yizhi/
./build
[[/code]]

编译时间可能较长。

+ 处理字库

之后，需要处理字库文件，将字库复制到编译输出目录内：

[[code]]
cp -r /root/yizhi/qtopia-free-2.2.0/qt2/lib/fonts/helvetica* /root/yizhi/qtopia-free-2.2.0/qtopia/image/opt/Qtopia/lib/fonts/
[[/code]]

+ 生成系统映像文件

为了生成系统镜像文件，同时为便于操作，不退出Root环境，但是在登录用户目录内进行处理：

[[code]]
cd /home/picsell-dois/iTop4412/
mkdir Qtopia
cd Qtopia
cp '/mnt/hgfs/Shared/iTOP-4412精英版光盘资料/08_源码_QtE以及qtopia2.2.0文件系统/root_2020115.tar.gz' ./
tar -vxf root_2020115.tar.gz
[[/code]]

请注意：不同的版本的“{{root_@@********@@.tar.gz}}”中的日期项的值可能不同。

随后，导出编译得到的文件，并生成镜像文件：

[[code]]
cd /home/picsell-dois/iTop4412/Qtopia/
cp -r /root/yizhi/qtopia-free-2.2.0/qtopia/image/opt/Qtopia /opt
cp -r /root/yizhi/qtopia-free-2.2.0/qtopia/image/opt/Qtopia /home/picsell-dois/iTop4412/Qtopia/root/opt
make_ext4fs -s -l 314572800 -a root -L linux system.img root
[[/code]]

执行完毕后，在{{/home/picsell-dois/iTop4412/Qtopia/}}目录下即可得到{{system.img}}镜像文件。

+ 编译Linux内核

++ 配置所需的ARM编译器及环境变量

此处使用随附的{{arm-2009q3}}作为交叉编译工具。该编译工具用于编译uBoot、Linux Kernel和Android的源代码。

从iTop-4412随附光盘内复制{{arm-2009q3.tar.bz2}}文件到{{/usr/local/arm/}}内并解包：

[[code]]
cd /usr/local/
mkdir arm
cd arm
cp '/mnt/hgfs/Shared/iTOP-4412精英版光盘资料/02_编译器及烧写工具/arm交叉编译器/arm-2009q3.tar.bz2' ./
tar -vxf arm-2009q3.tar.bz2
[[/code]]

配置环境变量：

[[code]]
sudo gedit /root/.bashrc
[[/code]]

通过在行首添加井号（“{{#}}”）的方式注释掉先前添加的其他编译器环境变量行（即{{export PATH=$PATH:/usr/local/arm/...}}这样的行），并在文件末尾添加：

[[code]]
#Compiler path for uBoot, Kernel and Android
export PATH=$PATH:/usr/local/arm/arm-2009q3/bin
[[/code]]

保存并退出，回到终端并更新环境变量：

[[code]]
source /root/.bashrc
[[/code]]

若需检查是否变更成功，可在终端输入{{arm}}并多次按键盘的{{TAB}}键触发系统的命令提示，如果提示列表中出现{{arm-none-linux-gnueabi-@@****@@}}命令，则可以认为操作成功。

如果是64位Ubuntu系统，强烈推荐为arm-2009q3安装32位兼容环境：

[[code]]
sudo apt-get install lsb-core
[[/code]]

++ 先导工作

前期工作需要借用Android 4.0.3的配置编译环境中的安装脚本，安装大量的程序包，但是，可以不执行安装Java的脚本：

[[code]]
cd /home/picsell-dois/
mkdir iTop4412
cd iTop4412
cp '/mnt/hgfs/Shared/iTOP-4412精英版光盘资料/02_编译器及烧写工具/tools/Android_JDK.tar.bz2' ./
tar -vxf Android_JDK.tar.bz2
cd Android_JDK
./install-devel-packages.sh
[[/code]]

可以再次执行{{./install-devel-packages.sh}}来确保程序包安装完整。

对于笔者使用的Ubuntu 12.04.5 LTS系统，须重新安装xorg以及libgl1-mesa库，否则重启虚拟机后可能无法进入图形界面：

[[code]]
apt-get install xorg
apt-get install libgl1-mesa-glx:i386
apt-get install libgl1-mesa-dev
[[/code]]

请注意，以上代码块中提供的三行{{apt-get install}}指令是针对笔者使用的Ubuntu 12.04.5 LTS系统的，目的是修复执行{{./install-devel-packages.sh}}（这个脚本是针对Ubuntu 12.04.2 LTS编写的）时由于程序包冲突而被破坏的图形环境，并安装编译所需的正确的库。

如果您使用的是Ubuntu 12.04.2 LTS系统，那么只需要执行{{./install-devel-packages.sh}}安装随iTop-4412光盘提供的脚本即可，千万不要执行上代码块中提供的三行{{apt-get install}}指令，否则您的操作系统将无法启动到图形界面。

最后，依次执行：

[[code]]
apt-get install gcc-4.4 g++-4.4 g++-4.4-multilib gcc-4.4-multilib
update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.4 100
update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.6 50
update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.4 100
update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.6 50
update-alternatives --install /usr/bin/cpp cpp-bin /usr/bin/cpp-4.4 100
update-alternatives --install /usr/bin/cpp cpp-bin /usr/bin/cpp-4.6 50
[[/code]]

降低Ubuntu系统自带的GCC版本到4.4.7，在终端输入{{gcc -v}}指令并按回车键执行，即可检查GCC版本。

[[collapsible show="▶ 关于install-devel-packages.sh" hide="▼ 关于install-devel-packages.sh"]]
随iTop-4412光盘提供的{{install-devel-packages.sh}}的文件内容如下：

[[code]]
#!/bin/bash

####################################################################
# Warning:
# Ubuntu 12.04.2 introduced a new X stack that isn't compatible with
# with the old glx packages.

# ------------------------------------------------------------------
# 12.04                --> 12.04.2 (*-lts-quantal)
# ------------------------------------------------------------------
# libgl1-mesa-glx:i386 --> libgl1-mesa-glx-lts-quantal:i386
# libgl1-mesa-dev      --> libgl1-mesa-dev-lts-quantal
# ------------------------------------------------------------------
#
# DON'T install libgl1-mesa-glx:i386 on 12.04.2, else it will *BREAK*
# your system.
####################################################################

# Execute an action
FA_DoExec() {
    echo "==> Executing: '${@}'"
    eval $@ || exit $?
}

# Ubuntu 12.04.2 LTS
FA_DoExec apt-get install \
    git gnupg flex bison gperf build-essential \
    zip curl libc6-dev libncurses5-dev x11proto-core-dev \
    libx11-dev:i386 libreadline6-dev:i386 \
    libgl1-mesa-glx-lts-quantal:i386 libgl1-mesa-dev-lts-quantal \
    g++-multilib mingw32 tofrodos lib32ncurses5-dev \
    python-markdown libxml2-utils xsltproc zlib1g-dev:i386

if [ ! -h /usr/lib/i386-linux-gnu/libGL.so ]; then
    FA_DoExec ln -s /usr/lib/i386-linux-gnu/mesa/libGL.so.1 \
        /usr/lib/i386-linux-gnu/libGL.so
fi

# Development support
FA_DoExec apt-get install \
    vim dos2unix minicom gawk
[[/code]]

由此可知，由于Ubuntu 12.04.2 LTS修改了用于图形界面的X程序堆栈，因此{{libgl1-mesa-glx:i386}}和{{libgl1-mesa-dev}}两个库需要使用等价的{{libgl1-mesa-glx-lts-quantal:i386}}和{{libgl1-mesa-dev-lts-quantal}}进行替换。

但是，实验显示，在Ubuntu 12.04.5 LTS中，试图安装{{libgl1-mesa-glx-lts-quantal:i386}}和{{libgl1-mesa-dev-lts-quantal}}两个库会导致图形环境遭到破坏，反而需要使用{{libgl1-mesa-glx:i386}}和{{libgl1-mesa-dev}}两个库。

因此，在Ubuntu 12.04.5 LTS上执行时，可以用以下内容替换{{install-devel-packages.sh}}文件的原始内容，以安装正确的程序包：

[[code]]
#!/bin/bash

####################################################################
# Warning:
# Ubuntu 12.04.2 introduced a new X stack that isn't compatible with
# with the old glx packages.

# ------------------------------------------------------------------
# 12.04                --> 12.04.2 (*-lts-quantal)
# ------------------------------------------------------------------
# libgl1-mesa-glx:i386 --> libgl1-mesa-glx-lts-quantal:i386
# libgl1-mesa-dev      --> libgl1-mesa-dev-lts-quantal
# ------------------------------------------------------------------
#
# DON'T install libgl1-mesa-glx:i386 on 12.04.2, else it will *BREAK*
# your system.
#
# In Ubuntu 12.04.5 LTS, please use libgl1-mesa-glx:i386 and libgl1-
# mesa-dev.
####################################################################

# Execute an action
FA_DoExec() {
    echo "==> Executing: '${@}'"
    eval $@ || exit $?
}

# Ubuntu 12.04.5 LTS
FA_DoExec apt-get install \
    git gnupg flex bison gperf build-essential \
    zip curl libc6-dev libncurses5-dev x11proto-core-dev \
    libx11-dev:i386 libreadline6-dev:i386 \
    libgl1-mesa-glx:i386 libgl1-mesa-dev \
    g++-multilib mingw32 tofrodos lib32ncurses5-dev \
    python-markdown libxml2-utils xsltproc zlib1g-dev:i386

if [ ! -h /usr/lib/i386-linux-gnu/libGL.so ]; then
    FA_DoExec ln -s /usr/lib/i386-linux-gnu/mesa/libGL.so.1 \
        /usr/lib/i386-linux-gnu/libGL.so
fi

# Development support
FA_DoExec apt-get install \
    vim dos2unix minicom gawk
[[/code]]
[[/collapsible]]

++ 复制和展开Linux内核源代码

从这里开始可以退出Root操作环境，亦可继续留在Root操作环境。为便于操作以及后续代码修改，此处选择退出Root操作环境。

随后，复制Linux内核源代码并展开：

[[code]]
cd /home/picsell-dois/iTop4412/
mkdir LinuxKernel
cd LinuxKernel
cp '/mnt/hgfs/Shared/iTOP-4412精英版光盘资料/06_源码_uboot和kernel/iTop4412_Kernel_3.0_20200410.tar.gz' ./
tar -vxf iTop4412_Kernel_3.0_20200410.tar.gz
cd iTop4412_Kernel_3.0
[[/code]]

++ 修改内核配置及源代码

展开的目录中存在以{{config_for_}}字符串开头的文件，这些文件是根据不同的开发板配置预编的配置文件，通过{{cp}}命令将与您的设备符合的文件复制为名为{{.config}}的文件，即可将其设置为当前活动的内核配置文件：

[[code]]
cd /home/picsell-dois/iTop4412/LinuxKernel/iTop4412_Kernel_3.0/
cp config_for_android_scp_elite .config
[[/code]]

如果需要以菜单形式调整内核设定，则执行：

[[code]]
make menuconfig
[[/code]]

如果出现“Install ncurses(ncurses-devel) and try again”报错，则先安装libncurses5-dev：

[[code]]
sudo apt-get install libncurses5-dev
[[/code]]

再重新执行：

[[code]]
make menuconfig
[[/code]]

++ 修改开机画面

开始前，请先确保已安装ARM-2009q3编译器，并根据手册指导配置了Linux内核编译环境以及Linux内核源文件。

首先，请先准备需要的开机画面图片，并将其保存为宽640像素、高480像素的bmp格式位图文件。

然后，在Windows上[*http://www.downxia.com/downinfo/223985.html 安装Image2Lcd程序]。随后，启动Image2Lcd（建议先前往界面底部的 [注册] 选项卡注册软件，激活密钥为{{0000-0000-0000-0000-6A3B}}）。

在Image2Lcd内，点击工具栏的 [打开] 按钮，选择处理完毕的bmp文件，并确保配置选项为：

> **输出数据类型：**C语言数组(*.c)
> 
> **扫描模式：**水平扫描
> 
> **输出灰度：**24位真彩色
> 
> **最大宽度和高度：**640, 480
> 
> 下拉列表下方的复选框区域全部不勾选。

确认无误后，点击工具栏的 [保存] 按钮，导出代码文件，根据默认设置，Image2Lcd会自动打开导出的代码。转换工作结束。

在Linux内核编译所用的设备内，编辑下列文件：

[[code]]
%LinuxKernelSrc%/drivers/video/samsung/iTop-4412.h
[[/code]]

其中{{%LinuxKernelSrc%}}指解包Linux内核源码得到的目录。打开该文件后，将Image2Lcd中导出代码所得到的数组的内容覆盖{{iBitmapData_q[]}}数组的内容并保存。

在编译环境的终端中定位到Linux内核源码目录，检查配置无误后键入指令：

[[code]]
make zImage
[[/code]]

开始编译，随后刷写编译得到zImage文件即可。

如果开机画面显示偏位，那么需要修改以下文件：

[[code]]
%LinuxKernelSrc%/drivers/video/samsung/s3cfb_ops.c
[[/code]]

中的{{s3cfb_draw_logo()}}函数中{{left}}、{{top}}两个变量的值并重新编译内核。

为保证居中，{{left}}、{{top}}两个变量的计算方法是：

[[code]]
left=(Screen.Width-640)/2
top=(Screen.Height-480)/2
[[/code]]

其中，{{Screen.Width}}和{{Screen.Height}}为您的开发板的屏幕的宽度和高度，单位为像素。

++ 编译内核

配置和修改操作完毕后，在终端执行：

[[code]]
make zImage
[[/code]]

开始编译Linux内核。编译完成后得到的{{zImage}}文件位于{{/home/picsell-dois/iTop4412/LinuxKernel/iTop4412_Kernel_3.0/arch/arm/boot/}}目录内。

+ 刷写

将编译得到的（或随光盘提供的）{{system.img}}和{{zImage}}两个文件复制到宿主机，并从随附光盘中提取{{\04_镜像_QT文件系统\system\ramdisk-uboot.img}}文件。

++ 进入Fastboot模式

首先，将串行数据线路连接在底板CON3（UART2）连接座处的串行接口上，另一端与计算机串口（或USB转化的串口）连接牢固，并确保计算机端各驱动、软硬件配置正常。

随后，打开超级终端Hyper Terminal，新建一个串口连接，在配置窗格中，确保波特率与设备管理器中串口的波特率匹配（推荐值为{{115200}}）且编码方式为{{UTF-8 (Latin)}}（老版本Hyper Terminal可以直接使用{{UTF-8}}），其余设置通常保持默认（8位数据位/1位停止位/无校验位/停用流控制）。建议再次检查以确保设备管理器中串口的配置与Hyper Terminal中的配置一致。

通过USB数据线连接开发板的OTG接口与计算机的USB接口，并将开发板上电开机，同时在反复敲击键盘（一般为回车键或空格键），此时应当成功打断了自动引导流程，并进入uBoot命令行模式。

输入以下命令：

[[code]]
fastboot
[[/code]]

并回车，即可进入Fastboot模式。进入Fastboot模式后即可通过{{fastboot}}命令行工具操作刷写、擦除等工作。

++ 刷写

在{{fastboot.exe}}程序所在的目录下启动命令提示符（或通过编辑Windows的{{Path}}环境变量将该目录纳入），依次执行：

[[code]]
fastboot flash kernel \PATH\TO\zImage
fastboot flash ramdisk \PATH\TO\ramdisk-uboot.img
fastboot flash system \PATH\TO\system.img
fastboot -w
fastboot reboot
[[/code]]

完成后，设备重启，即能进入Qtopia 2.2.0环境。

+ Qtopia 2.2.0配置

++ 编辑初始化配置文件rcS

Qtopia 2.2.0的初始化配置文件位于：

[[code]]
/etc/init.d/rcS
[[/code]]

在超级终端输入：

[[code]]
vi /etc/init.d/rcS
[[/code]]

编辑该文件，文件末尾有以下行：

[[code]]
#/bin/qtopia &
/bin/qt4 & 
[[/code]]

按{{i}}键进入插入编辑模式，将{{/bin/qtopia &}}前的井号（“{{#}}”）删除，并在{{/bin/qt4 & }}前加入井号（“{{#}}”）将其设为注释状态。按{{ESC}}键并输入{{:wq}}后按回车执行保存操作，重启设备即可自动启动到Qtopia图形界面，而不会启动到Qt/E 4.7.1提供的演示程序界面。

如果需要重建Qtopia的{{system.img}}镜像，也可以在先前解包{{root_@@********@@.tar.gz}}得到的{{root}}目录中编辑{{/etc/init.d/rcS}}文件：

[[code]]
sudo gedit '/home/picsell-dois/iTop4412/Qtopia/root/etc/init.d/rcS'
[[/code]]

完成后，回到终端执行：

[[code]]
cd /home/picsell-dois/iTop4412/Qtopia/
rm system.img
make_ext4fs -s -l 314572800 -a root -L linux system.img root
[[/code]]

重建{{system.img}}并执行刷写流程即可。

++ 修改Qtopia显示语言

iTop-4412的Qtopia默认为中文，但因默认字库问题导致无法正常显示，故将其改为英文。

在超级终端输入：

[[code]]
vi /root/Settings/locale.conf
[[/code]]

按{{i}}键进入插入编辑模式，修改{{[LANGUAGE]}}一节下{{Language = }}一行的内容为：

[[code]]
Language = en_US
[[/code]]

按{{ESC}}键并输入{{:wq}}后按回车执行保存操作，重启设备即可将语言修改为英文，将该行设为{{Language = zh_CN}}即可将语言修改为简体中文。

如果需要重建Qtopia的{{system.img}}镜像，也可以在先前解包{{root_@@********@@.tar.gz}}得到的{{root}}目录中编辑{{/root/Settings/locale.conf}}文件：

[[code]]
sudo gedit '/home/picsell-dois/iTop4412/Qtopia/root/root/Settings/locale.conf'
[[/code]]

完成后，回到终端执行：

[[code]]
cd /home/picsell-dois/iTop4412/Qtopia/
rm system.img
make_ext4fs -s -l 314572800 -a root -L linux system.img root
[[/code]]

重建{{system.img}}并执行刷写流程即可。

++ 修改Qtopia默认字体

iTop-4412的Qtopia默认为中文，但是默认字体Helvetica不支持显示中文，故使用支持显示中文的Unifont字体。

在超级终端输入：

[[code]]
vi /root/Settings/qpe.conf
[[/code]]

按{{i}}键进入插入编辑模式，修改{{[Appearance]}}一节下{{FontFamily = }}一行的内容为：

[[code]]
FontFamily = Unifont
[[/code]]

修改{{[Appearance]}}一节下{{FontSize = }}一行的内容为：

[[code]]
FontSize = 16
[[/code]]

按{{ESC}}键并输入{{:wq}}后按回车执行保存操作，重启设备即可将语言修改为英文，将该行设为{{Language = zh_CN}}即可将语言修改为简体中文。

如果需要重建Qtopia的{{system.img}}镜像，也可以在先前解包{{root_@@********@@.tar.gz}}得到的{{root}}目录中编辑{{/root/Settings/qpe.conf}}文件：

[[code]]
sudo gedit '/home/picsell-dois/iTop4412/Qtopia/root/root/Settings/qpe.conf'
[[/code]]

完成后，回到终端执行：

[[code]]
cd /home/picsell-dois/iTop4412/Qtopia/
rm system.img
make_ext4fs -s -l 314572800 -a root -L linux system.img root
[[/code]]

重建{{system.img}}并执行刷写流程即可。

++ 启用Qtopia的矩阵键盘支持

iTop-4412的矩阵键盘设备被挂载在：

[[code]]
/dev/input/event1
[[/code]]

在超级终端输入：

[[code]]
vi /bin/qtopia
[[/code]]

按{{i}}键进入插入编辑模式，将{{export QWS_KEYBOARD=}}行的内容改为：

[[code]]
export QWS_KEYBOARD="USB:/dev/input/event1"
[[/code]]

按{{ESC}}键并输入{{:wq}}后按回车执行保存操作，重启设备即可。

如果需要重建Qtopia的{{system.img}}镜像，也可以在先前解包{{root_@@********@@.tar.gz}}得到的{{root}}目录中编辑{{/bin/qtopia}}文件：

[[code]]
sudo gedit '/home/picsell-dois/iTop4412/Qtopia/root/bin/qtopia'
[[/code]]

完成后，回到终端执行：

[[code]]
cd /home/picsell-dois/iTop4412/Qtopia/
rm system.img
make_ext4fs -s -l 314572800 -a root -L linux system.img root
[[/code]]

重建{{system.img}}并执行刷写流程即可。

已知问题：读取的键值存在前导“3”和结尾“3”，在Qt/E环境中不可用。

++ 配置以使Qt/E 4.7.1支持矩阵键盘 

若需要使Qt/E 4.7.1环境支持矩阵键盘，需要开启{{-qt-kbd-linuxinput}}开关后重新编译Qt/E 4.7.1，并修改Qt/E 4.7.1的启动脚本{{/bin/qt4}}。

+++ 进入Root操作环境

为便于操作，进入Root操作环境。首先在Ubuntu终端中输入指令：

[[code]]
sudo passwd
[[/code]]

指定Root密码，随后输入指令：

[[code]]
su
[[/code]]

进入Root操作环境。

若无特殊说明，以下操作均在Root操作环境下进行。

+++ 配置所需的ARM编译器及环境变量

Qt/E 4.7.1源代码使用arm-linux-gcc-4.3.2编译器编译，因此需要进行编译器配置：

[[code]]
cd /usr/local/arm/
cp '/mnt/hgfs/Shared/iTOP-4412精英版光盘资料/08_源码_QtE以及qtopia2.2.0文件系统/arm-linux-gcc-4.3.2.tar.gz' ./
tar -vxf arm-linux-gcc-4.3.2.tar.gz
[[/code]]

配置环境变量：

[[code]]
sudo gedit /root/.bashrc
[[/code]]

通过在行首添加井号（“{{#}}”）的方式注释掉先前添加的其他编译器环境变量行（即{{export PATH=$PATH:/usr/local/arm/...}}这样的行），并在文件末尾添加：

[[code]]
#Compiler path for Qt/E 4.7.1
export PATH=$PATH:/usr/local/arm/4.3.2/bin
[[/code]]

保存并退出，回到终端并更新环境变量：

[[code]]
source /root/.bashrc
[[/code]]

若需检查是否变更成功，可在终端输入{{arm}}并多次按键盘的{{TAB}}键触发系统的命令提示，如果提示列表中出现{{arm-none-linux-gnueabi-gcc-4.3.2}}命令，则可以认为操作成功。

+++ 配置Qt/E 4.7.1编译环境

++++ 先导工作

前期工作需要借用Android 4.0.3的配置编译环境中的安装脚本，安装大量的程序包，和Android 4.0.3编译环境不同，可以不执行安装Java的脚本：

[[code]]
cd /home/picsell-dois/
mkdir iTop4412
cd iTop4412
cp '/mnt/hgfs/Shared/iTOP-4412精英版光盘资料/02_编译器及烧写工具/tools/Android_JDK.tar.bz2' ./
tar -vxf Android_JDK.tar.bz2
cd Android_JDK
./install-devel-packages.sh
[[/code]]

可以再次执行{{./install-devel-packages.sh}}来确保程序包安装完整。

对于笔者使用的Ubuntu 12.04.5 LTS系统，须重新安装xorg以及libgl1-mesa库，否则重启虚拟机后可能无法进入图形界面：

[[code]]
apt-get install xorg
apt-get install libgl1-mesa-glx:i386
apt-get install libgl1-mesa-dev
[[/code]]

请注意，以上代码块中提供的三行{{apt-get install}}指令是针对笔者使用的Ubuntu 12.04.5 LTS系统的，目的是修复执行{{./install-devel-packages.sh}}（这个脚本是针对Ubuntu 12.04.2 LTS编写的）时由于程序包冲突而被破坏的图形环境，并安装编译所需的正确的库。

如果您使用的是Ubuntu 12.04.2 LTS系统，那么只需要执行{{./install-devel-packages.sh}}安装随iTop-4412光盘提供的脚本即可，千万不要执行上代码块中提供的三行{{apt-get install}}指令，否则您的操作系统将无法启动到图形界面。

最后，依次执行：

[[code]]
apt-get install gcc-4.4 g++-4.4 g++-4.4-multilib gcc-4.4-multilib
update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.4 100
update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.6 50
update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.4 100
update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.6 50
update-alternatives --install /usr/bin/cpp cpp-bin /usr/bin/cpp-4.4 100
update-alternatives --install /usr/bin/cpp cpp-bin /usr/bin/cpp-4.6 50
[[/code]]

降低Ubuntu系统自带的GCC版本到4.4.7，在终端输入{{gcc -v}}指令并按回车键执行，即可检查GCC版本。

[[collapsible show="▶ 关于install-devel-packages.sh" hide="▼ 关于install-devel-packages.sh"]]
随iTop-4412光盘提供的{{install-devel-packages.sh}}的文件内容如下：

[[code]]
#!/bin/bash

####################################################################
# Warning:
# Ubuntu 12.04.2 introduced a new X stack that isn't compatible with
# with the old glx packages.

# ------------------------------------------------------------------
# 12.04                --> 12.04.2 (*-lts-quantal)
# ------------------------------------------------------------------
# libgl1-mesa-glx:i386 --> libgl1-mesa-glx-lts-quantal:i386
# libgl1-mesa-dev      --> libgl1-mesa-dev-lts-quantal
# ------------------------------------------------------------------
#
# DON'T install libgl1-mesa-glx:i386 on 12.04.2, else it will *BREAK*
# your system.
####################################################################

# Execute an action
FA_DoExec() {
    echo "==> Executing: '${@}'"
    eval $@ || exit $?
}

# Ubuntu 12.04.2 LTS
FA_DoExec apt-get install \
    git gnupg flex bison gperf build-essential \
    zip curl libc6-dev libncurses5-dev x11proto-core-dev \
    libx11-dev:i386 libreadline6-dev:i386 \
    libgl1-mesa-glx-lts-quantal:i386 libgl1-mesa-dev-lts-quantal \
    g++-multilib mingw32 tofrodos lib32ncurses5-dev \
    python-markdown libxml2-utils xsltproc zlib1g-dev:i386

if [ ! -h /usr/lib/i386-linux-gnu/libGL.so ]; then
    FA_DoExec ln -s /usr/lib/i386-linux-gnu/mesa/libGL.so.1 \
        /usr/lib/i386-linux-gnu/libGL.so
fi

# Development support
FA_DoExec apt-get install \
    vim dos2unix minicom gawk
[[/code]]

由此可知，由于Ubuntu 12.04.2 LTS修改了用于图形界面的X程序堆栈，因此{{libgl1-mesa-glx:i386}}和{{libgl1-mesa-dev}}两个库需要使用等价的{{libgl1-mesa-glx-lts-quantal:i386}}和{{libgl1-mesa-dev-lts-quantal}}进行替换。

但是，实验显示，在Ubuntu 12.04.5 LTS中，试图安装{{libgl1-mesa-glx-lts-quantal:i386}}和{{libgl1-mesa-dev-lts-quantal}}两个库会导致图形环境遭到破坏，反而需要使用{{libgl1-mesa-glx:i386}}和{{libgl1-mesa-dev}}两个库。

因此，在Ubuntu 12.04.5 LTS上执行时，可以用以下内容替换{{install-devel-packages.sh}}文件的原始内容，以安装正确的程序包：

[[code]]
#!/bin/bash

####################################################################
# Warning:
# Ubuntu 12.04.2 introduced a new X stack that isn't compatible with
# with the old glx packages.

# ------------------------------------------------------------------
# 12.04                --> 12.04.2 (*-lts-quantal)
# ------------------------------------------------------------------
# libgl1-mesa-glx:i386 --> libgl1-mesa-glx-lts-quantal:i386
# libgl1-mesa-dev      --> libgl1-mesa-dev-lts-quantal
# ------------------------------------------------------------------
#
# DON'T install libgl1-mesa-glx:i386 on 12.04.2, else it will *BREAK*
# your system.
#
# In Ubuntu 12.04.5 LTS, please use libgl1-mesa-glx:i386 and libgl1-
# mesa-dev.
####################################################################

# Execute an action
FA_DoExec() {
    echo "==> Executing: '${@}'"
    eval $@ || exit $?
}

# Ubuntu 12.04.5 LTS
FA_DoExec apt-get install \
    git gnupg flex bison gperf build-essential \
    zip curl libc6-dev libncurses5-dev x11proto-core-dev \
    libx11-dev:i386 libreadline6-dev:i386 \
    libgl1-mesa-glx:i386 libgl1-mesa-dev \
    g++-multilib mingw32 tofrodos lib32ncurses5-dev \
    python-markdown libxml2-utils xsltproc zlib1g-dev:i386

if [ ! -h /usr/lib/i386-linux-gnu/libGL.so ]; then
    FA_DoExec ln -s /usr/lib/i386-linux-gnu/mesa/libGL.so.1 \
        /usr/lib/i386-linux-gnu/libGL.so
fi

# Development support
FA_DoExec apt-get install \
    vim dos2unix minicom gawk
[[/code]]
[[/collapsible]]

++++ 安装生成系统镜像文件所需的工具

为了生成系统镜像{{system.img}}，需要安装mkimage工具：

[[code]]
cd '/mnt/hgfs/Shared/iTOP-4412精英版光盘资料/02_编译器以及烧写工具/tools/'
cp ./linux_tools.tgz /
cd /
tar -vxf linux_tools.tgz
[[/code]]

至此，Qt/E 4.7.1编译和镜像构建环境搭建完毕。

+++ 复制和展开Qt/E 4.7.1源代码

继续使用Root身份操作，在{{/root/}}目录下建立{{yizhi}}目录，请注意，建议不要使用别的目录名称。

随后，复制ARM版本的Qt/E 4.7.1源码文件并展开：

[[code]]
cd /root/
mkdir yizhi
cd yizhi
cp '/mnt/hgfs/Shared/iTOP-4412精英版光盘资料/08_源码_QtE以及qtopia2.2.0文件系统/qt-everywhere-opensource-src-4.7.1_20141224.tar.gz' ./
tar -vxf qt-everywhere-opensource-src-4.7.1_20141224.tar.gz
[[/code]]

+++ 修改Qt/E 4.7.1编译参数

建议再次检查各环环境配是否正确，并确保当前位于{{/root/yizhi/qt-everywhere-opensource-src-4.7.1}}目录内，输入以下指令，编辑编译脚本文件{{build-all}}：

[[code]]
cd /root/yizhi/qt-everywhere-opensource-src-4.7.1/
sudo gedit build-all
[[/code]]

找到{{echo yes | ./configure ...}}行，并在{{./configure}}后添加开关{{-qt-kbd-linuxinput}}，使其看起来像：

[[code]]
echo yes | ./configure -opensource -embedded arm -xplatform qws/linux-arm-g++  -no-webkit -qt-libtiff -qt-libmng -qt-kbd-linuxinput -qt-mouse-tslib -qt-mouse-pc -qt-gfx-transformed -no-mouse-linuxtp -prefix /opt/qt-4.7.1   -I /usr/local/tslib/include -L /usr/local/tslib/lib
[[/code]]

随后，保存并退出。

+++ 编译Qt/E 4.7.1源代码

建议再次检查各环环境配是否正确，并确保当前位于{{/root/yizhi/qt-everywhere-opensource-src-4.7.1}}目录内，运行编译脚本：

[[code]]
cd /root/yizhi/qt-everywhere-opensource-src-4.7.1/
./build-all
[[/code]]

编译时间可能较长。编译得到的文件位于{{/opt}}目录中。

+++ 生成系统映像文件

为了生成系统镜像文件，同时为便于操作，不退出Root环境，但是在登录用户目录内进行处理：

[[code]]
cd /home/picsell-dois/iTop4412/
mkdir Qtopia
cd Qtopia
cp '/mnt/hgfs/Shared/iTOP-4412精英版光盘资料/08_源码_QtE以及qtopia2.2.0文件系统/root_2020115.tar.gz' ./
tar -vxf root_2020115.tar.gz
[[/code]]

请注意：不同的版本的“{{root_@@********@@.tar.gz}}”中的日期项的值可能不同。

随后，导出编译得到的文件，并生成镜像文件：

[[code]]
cd /home/picsell-dois/iTop4412/Qtopia/
cp -r /opt/qt-4.7.1 /home/picsell-dois/iTop4412/Qtopia/root/opt
make_ext4fs -s -l 314572800 -a root -L linux system.img root
[[/code]]

执行完毕后，在{{/home/picsell-dois/iTop4412/Qtopia/}}目录下即可得到{{system.img}}镜像文件。

+++ 修改Qt/E 4.7.1配置文件以启用矩阵键盘

将{{system.img}}镜像文件刷入设备后，在超级终端输入：

[[code]]
vi /bin/qt4
[[/code]]

按{{i}}键进入插入编辑模式，将{{export QWS_KEYBOARD=}}行解除注释（即删除行首的井号（“{{#}}”）），并将其内容改为：

[[code]]
export QWS_KEYBOARD="USB:/dev/input/event1"
[[/code]]

按{{ESC}}键并输入{{:wq}}后按回车执行保存操作，重启设备即可。

如果需要重建{{system.img}}镜像，也可以在先前解包{{root_@@********@@.tar.gz}}得到的{{root}}目录中编辑{{/bin/qt4}}文件：

[[code]]
sudo gedit '/home/picsell-dois/iTop4412/Qtopia/root/bin/qt4'
[[/code]]

完成后，回到终端执行：

[[code]]
cd /home/picsell-dois/iTop4412/Qtopia/
rm system.img
make_ext4fs -s -l 314572800 -a root -L linux system.img root
[[/code]]

重建{{system.img}}并执行刷写流程即可。

+ 安装和配置Qt Creator 5.3.2

++ 安装Qt Creator 5.3.2

从 *http://download.qt.io/new_archive/qt/5.3/5.3.2/ 下载[*http://download.qt.io/new_archive/qt/5.3/5.3.2/qt-opensource-linux-x64-android-5.3.2.run qt-opensource-linux-x64-android-5.3.2.run]。在终端中定位到该文件所在目录并执行：

[[code]]
./qt-opensource-linux-x64-android-5.3.2.run
[[/code]]

开始安装（是否用{{sudo}}指令以Root身份运行可随意）。

++ 配置Qt/E 4.7.1编译套件

从Ubuntu程序启动器启动Qt Creator，点击菜单栏的 [工具(Tools)] > [选项(Options)] > [构建和运行(Build & Run)]。

首先，切换到 [编译器(Compilers)] 选项卡，点击 [添加(Add)] > [GCC]，[名称(Name)]可自由填写，[编译器路径(Compiler path)] 填写为：

[[code]]
/usr/local/arm/4.4.1/bin/arm-none-linux-gnueabi-gcc
[[/code]]

点击 [Apply] 按钮。

随后，切换到 [Qt Versions] 选项卡，点击 [添加...(Add...)] 按钮，导航并选中Qt/E 4.7.1的{{qmake}}文件，由于笔者电脑已经编译过Qt/E 4.7.1，因此{{qmake}}文件位于：

[[code]]
/opt/qt-4.7.1/bin/qmake
[[/code]]

光盘的{{/08_源码_QtE以及qtopia2.2.0文件系统/root_@@********@@.tar.gz}}文件的{{/root/opt/qt-4.7.1/bin}}中也提供了{{qmake}}文件。

点击 [Apply] 按钮。

最后，切换到 [构建套件(Kit)] 选项卡，点击 [添加(Add)]按钮，建立一个套件，[编译器(Compiler)] 为之前添加的ARM编译器，[Qt 版本(Qt version)] 为之前添加的Qt 4.7.1。

点击 [OK] 按钮，保存退出。

++ 使用Qt/E 4.7.1编译套件

对于新建的项目，在 [Kit Selection] 界面，勾选之前添加的Qt 4.7.1套件即可。

对于已有的项目，打开项目后切换到左侧栏的 [项目(Projects)] 选项卡，点击 [添加构建套件(Add kit)]按钮，添加先前配置的Qt 4.7.1套件即可。

++ 故障排除

如果向Qt 4.7.1编译时出现“ui_MainWindow.h Error 1”等错误，可能由兼容性问题引发，建议右键点击错误窗格并切换到详细信息模式，检查出错原因。

+ 在开发板上运行Qt程序

可以使用FAT32或FAT文件系统的USB磁盘或TF卡，将程序上传到开发板内。开始前，需将开发板上电开机并与宿主机的超级终端建立通讯连接。

++ 设备挂载

+++ USB磁盘

对于USB磁盘，将设备插入开发板的USB接口，超级终端回显{{[sda] Attached SCSI removable disk}}等提示，在超级终端按回车键进入命令行模式，执行：

[[code]]
mkdir /mnt/usb1
mount /dev/udisk /mnt/usb1/
[[/code]]

即可挂载USB磁盘。

+++ TF卡

对于TF卡，将设备插入开发板的TF卡槽，在超级终端按回车键进入命令行模式，执行：

[[code]]
mkdir /mnt/sdcard/
mount /dev/mmcblk1p1 /mnt/sdcard/
[[/code]]

即可挂载TF卡。

++ 执行程序

在超级终端通过{{cp}}指令将自编程序复制到开发板本地，例如：

[[code]]
cd /mnt/usb1
cp Demo /bin/
[[/code]]

进入{{/bin}}文件夹，建立{{qt4}}脚本的副本并编辑：

[[code]]
cd /bin
cp qt4 qt-main
vi qt-main
[[/code]]

通过在行首添加井号（“{{#}}”）的方式，注释掉{{qt-main}}文件中的以下行（通常位于文件末尾）：

[[code]]
cd /opt/qt-4.7.1/demos/embedded/fluidlauncher
./fluidlauncher -qws 
[[/code]]

并在文件末尾添加下列行：

[[code]]
cd /bin
./Demo -qws
[[/code]]

此处{{/bin/Demo}}是示例程序所在的位置，请根据实际情况改动。这样，{{qt-main}}文件的末尾看起来类似这样：

[[code]]
#cd /opt/qt-4.7.1/demos/textedit
#./textedit -qws 

cd /bin
./Demo -qws
[[/code]]

按{{ESC}}键并输入{{:wq}}后按回车执行保存操作。

退出当前正在执行的Qt程序，并在超级终端中执行：

[[code]]
/bin/qt-main &
[[/code]]

即可开始运行自编程序。

++ 配置开机自启动

初始化配置文件位于：

[[code]]
/etc/init.d/rcS
[[/code]]

在超级终端输入：

[[code]]
vi /etc/init.d/rcS
[[/code]]

编辑该文件，文件末尾有以下行：

[[code]]
#/bin/qtopia &
/bin/qt4 & 
[[/code]]

通过在行首添加井号（“{{#}}”）的方式，将这两行全部设为注释状态，并在这两行后新建一行，输入：

[[code]]
/bin/qt-main &
[[/code]]

按{{ESC}}键并输入{{:wq}}后按回车执行保存操作，重启设备即可。

++ 隐藏程序中的鼠标指针

Qt/E默认会提供一个鼠标指针，如果需要隐藏Qt/E提供的鼠标指针，可以在程序的启动脚本中编辑启动程序的命令所在的行，并启动参数末尾添加“{{ -nomouse}}”开关，使其看起来像这样：

[[code]]
./Demo -qws -nomouse
[[/code]]

按{{ESC}}键并输入{{:wq}}后按回车执行保存操作，重启设备即可。

++ 跳过开机时的触控校准

Qt/E 4.7.1的触控校准文件被存放在{{/etc/pointercal}}位置下，系统启动时，如果该文件不存在或为空，则系统会调用tslib的触控校准程序{{/usr/local/tslib/bin/ts_calibrate}}。

为了跳过校准流程，可以在Qt/E的启动脚本（{{/bin/qt4}}或用户自定义的启动脚本）中，通过在行首添加井号（“{{#}}”）的方式，将{{/usr/local/tslib/bin/ts_calibrate}}行设为注释状态，重建{{system.img}}镜像文件并重新刷写即可。

++ 固化更改到设备固件

如果需要重建Qtopia的{{system.img}}镜像，也可以在先前解包{{root_@@********@@.tar.gz}}得到的{{root}}目录中编辑相关文件：

[[code]]
sudo gedit '/home/picsell-dois/iTop4412/Qtopia/root/etc/init.d/rcS'
sudo cp '/home/picsell-dois/iTop4412/Qtopia/root/bin/qt4' '/home/picsell-dois/iTop4412/Qtopia/root/bin/qt-main'
sudo gedit '/home/picsell-dois/iTop4412/Qtopia/root/bin/qt-main'
[[/code]]

随后，将自编程序复制到{{/home/picsell-dois/iTop4412/Qtopia/root/}}目录中的相应位置。

完成后，回到终端执行：

[[code]]
cd /home/picsell-dois/iTop4412/Qtopia/
rm system.img
make_ext4fs -s -l 314572800 -a root -L linux system.img root
[[/code]]

重建{{system.img}}并执行刷写流程即可。

+ 安装绘图插件QCustomPlot

QCumstomPlot是一个支持Qt 4.6到Qt 5.11的绘图插件，可用于绘制专业的图像。

下载链接：*https://www.qcustomplot.com/index.php/download

配置指南：*https://www.qcustomplot.com/index.php/tutorials/settingup