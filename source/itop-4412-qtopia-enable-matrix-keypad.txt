iTop-4412的矩阵键盘设备被挂载在：

[[code]]
 /dev/input/event1
 [[/code]]

在超级终端输入：

[[code]]
 vi /bin/qtopia
 [[/code]]

按{{i}}键进入插入编辑模式，将{{export QWS_KEYBOARD=}}行的内容改为：

[[code]]
 export QWS_KEYBOARD="USB:/dev/input/event1"
 [[/code]]

按{{ESC}}键并输入{{:wq}}后按回车执行保存操作，重启设备即可。

 如果需要重建Qtopia的{{system.img}}镜像，也可以在先前解包{{root_@@********@@.tar.gz}}得到的{{root}}目录中编辑{{/bin/qtopia}}文件：

[[code]]
 sudo gedit '/home/picsell-dois/iTop4412/Qtopia/root/bin/qtopia'
 [[/code]]

完成后，回到终端执行：

[[code]]
 cd /home/picsell-dois/iTop4412/Qtopia/
 rm system.img
 make_ext4fs -s -l 314572800 -a root -L linux system.img root
 [[/code]]

重建{{system.img}}并执行刷写流程即可。

 已知问题：读取的键值存在前导“3”和结尾“3”，在Qt/E环境中不可用。

@@@@
 @@@@
 @@@@
 @@@@
 @@@@
 @@@@
 @@@@
 @@@@
 @@@@
 @@@@

-----

若要在Qt/E环境中启用矩阵键盘，请执行下面的步骤：

 若需要使Qt/E 4.7.1环境支持矩阵键盘，需要开启{{-qt-kbd-linuxinput}}开关后重新编译Qt/E 4.7.1，并修改Qt/E 4.7.1的启动脚本{{/bin/qt4}}。

+ 进入Root操作环境

 为便于操作，进入Root操作环境。首先在Ubuntu终端中输入指令：

[[code]]
 sudo passwd
 [[/code]]

指定Root密码，随后输入指令：

[[code]]
 su
 [[/code]]

进入Root操作环境。

 若无特殊说明，以下操作均在Root操作环境下进行。

+ 配置所需的ARM编译器及环境变量

Qt/E 4.7.1源代码使用arm-linux-gcc-4.3.2编译器编译，因此需要进行编译器配置：

[[code]]
 cd /usr/local/arm/
 cp '/mnt/hgfs/Shared/iTOP-4412精英版光盘资料/08_源码_QtE以及qtopia2.2.0文件系统/arm-linux-gcc-4.3.2.tar.gz' ./
 tar -vxf arm-linux-gcc-4.3.2.tar.gz
 [[/code]]

配置环境变量：

[[code]]
 sudo gedit /root/.bashrc
 [[/code]]

通过在行首添加井号（“{{#}}”）的方式注释掉先前添加的其他编译器环境变量行（即{{export PATH=$PATH:/usr/local/arm/...}}这样的行），并在文件末尾添加：

[[code]]
 #Compiler path for Qt/E 4.7.1
 export PATH=$PATH:/usr/local/arm/4.3.2/bin
 [[/code]]

保存并退出，回到终端并更新环境变量：

[[code]]
 source /root/.bashrc
 [[/code]]

若需检查是否变更成功，可在终端输入{{arm}}并多次按键盘的{{TAB}}键触发系统的命令提示，如果提示列表中出现{{arm-none-linux-gnueabi-gcc-4.3.2}}命令，则可以认为操作成功。

+ 配置Qt/E 4.7.1编译环境

++ 先导工作

 前期工作需要借用Android 4.0.3的配置编译环境中的安装脚本，安装大量的程序包，和Android 4.0.3编译环境不同，可以不执行安装Java的脚本：

[[code]]
 cd /home/picsell-dois/
 mkdir iTop4412
 cd iTop4412
 cp '/mnt/hgfs/Shared/iTOP-4412精英版光盘资料/02_编译器及烧写工具/tools/Android_JDK.tar.bz2' ./
 tar -vxf Android_JDK.tar.bz2
 cd Android_JDK
 ./install-devel-packages.sh
 [[/code]]

可以再次执行{{./install-devel-packages.sh}}来确保程序包安装完整。

 对于笔者使用的Ubuntu 12.04.5 LTS系统，须重新安装xorg以及libgl1-mesa库，否则重启虚拟机后可能无法进入图形界面：

[[code]]
 apt-get install xorg
 apt-get install libgl1-mesa-glx:i386
 apt-get install libgl1-mesa-dev
 [[/code]]

请注意，以上代码块中提供的三行{{apt-get install}}指令是针对笔者使用的Ubuntu 12.04.5 LTS系统的，目的是修复执行{{./install-devel-packages.sh}}（这个脚本是针对Ubuntu 12.04.2 LTS编写的）时由于程序包冲突而被破坏的图形环境，并安装编译所需的正确的库。

 如果您使用的是Ubuntu 12.04.2 LTS系统，那么只需要执行{{./install-devel-packages.sh}}安装随iTop-4412光盘提供的脚本即可，千万不要执行上代码块中提供的三行{{apt-get install}}指令，否则您的操作系统将无法启动到图形界面。

 最后，依次执行：

[[code]]
 apt-get install gcc-4.4 g++-4.4 g++-4.4-multilib gcc-4.4-multilib
 update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.4 100
 update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.6 50
 update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.4 100
 update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.6 50
 update-alternatives --install /usr/bin/cpp cpp-bin /usr/bin/cpp-4.4 100
 update-alternatives --install /usr/bin/cpp cpp-bin /usr/bin/cpp-4.6 50
 [[/code]]

降低Ubuntu系统自带的GCC版本到4.4.7，在终端输入{{gcc -v}}指令并按回车键执行，即可检查GCC版本。

[[collapsible show="▶ 关于install-devel-packages.sh" hide="▼ 关于install-devel-packages.sh"]]
随iTop-4412光盘提供的{{install-devel-packages.sh}}的文件内容如下：

[[code]]
 #!/bin/bash

 ####################################################################
 # Warning:
 # Ubuntu 12.04.2 introduced a new X stack that isn't compatible with
 # with the old glx packages.

 # ------------------------------------------------------------------
 # 12.04                --> 12.04.2 (*-lts-quantal)
 # ------------------------------------------------------------------
 # libgl1-mesa-glx:i386 --> libgl1-mesa-glx-lts-quantal:i386
 # libgl1-mesa-dev      --> libgl1-mesa-dev-lts-quantal
 # ------------------------------------------------------------------
 #
 # DON'T install libgl1-mesa-glx:i386 on 12.04.2, else it will *BREAK*
 # your system.
 ####################################################################

 # Execute an action
 FA_DoExec() {
     echo "==> Executing: '${@}'"
     eval $@ || exit $?
 }

 # Ubuntu 12.04.2 LTS
 FA_DoExec apt-get install \
     git gnupg flex bison gperf build-essential \
     zip curl libc6-dev libncurses5-dev x11proto-core-dev \
     libx11-dev:i386 libreadline6-dev:i386 \
     libgl1-mesa-glx-lts-quantal:i386 libgl1-mesa-dev-lts-quantal \
     g++-multilib mingw32 tofrodos lib32ncurses5-dev \
     python-markdown libxml2-utils xsltproc zlib1g-dev:i386

 if [ ! -h /usr/lib/i386-linux-gnu/libGL.so ]; then
     FA_DoExec ln -s /usr/lib/i386-linux-gnu/mesa/libGL.so.1 \
         /usr/lib/i386-linux-gnu/libGL.so
 fi

 # Development support
 FA_DoExec apt-get install \
     vim dos2unix minicom gawk
 [[/code]]

由此可知，由于Ubuntu 12.04.2 LTS修改了用于图形界面的X程序堆栈，因此{{libgl1-mesa-glx:i386}}和{{libgl1-mesa-dev}}两个库需要使用等价的{{libgl1-mesa-glx-lts-quantal:i386}}和{{libgl1-mesa-dev-lts-quantal}}进行替换。

 但是，实验显示，在Ubuntu 12.04.5 LTS中，试图安装{{libgl1-mesa-glx-lts-quantal:i386}}和{{libgl1-mesa-dev-lts-quantal}}两个库会导致图形环境遭到破坏，反而需要使用{{libgl1-mesa-glx:i386}}和{{libgl1-mesa-dev}}两个库。

 因此，在Ubuntu 12.04.5 LTS上执行时，可以用以下内容替换{{install-devel-packages.sh}}文件的原始内容，以安装正确的程序包：

[[code]]
 #!/bin/bash

 ####################################################################
 # Warning:
 # Ubuntu 12.04.2 introduced a new X stack that isn't compatible with
 # with the old glx packages.

 # ------------------------------------------------------------------
 # 12.04                --> 12.04.2 (*-lts-quantal)
 # ------------------------------------------------------------------
 # libgl1-mesa-glx:i386 --> libgl1-mesa-glx-lts-quantal:i386
 # libgl1-mesa-dev      --> libgl1-mesa-dev-lts-quantal
 # ------------------------------------------------------------------
 #
 # DON'T install libgl1-mesa-glx:i386 on 12.04.2, else it will *BREAK*
 # your system.
 #
 # In Ubuntu 12.04.5 LTS, please use libgl1-mesa-glx:i386 and libgl1-
 # mesa-dev.
 ####################################################################

 # Execute an action
 FA_DoExec() {
     echo "==> Executing: '${@}'"
     eval $@ || exit $?
 }

 # Ubuntu 12.04.5 LTS
 FA_DoExec apt-get install \
     git gnupg flex bison gperf build-essential \
     zip curl libc6-dev libncurses5-dev x11proto-core-dev \
     libx11-dev:i386 libreadline6-dev:i386 \
     libgl1-mesa-glx:i386 libgl1-mesa-dev \
     g++-multilib mingw32 tofrodos lib32ncurses5-dev \
     python-markdown libxml2-utils xsltproc zlib1g-dev:i386

 if [ ! -h /usr/lib/i386-linux-gnu/libGL.so ]; then
     FA_DoExec ln -s /usr/lib/i386-linux-gnu/mesa/libGL.so.1 \
         /usr/lib/i386-linux-gnu/libGL.so
 fi

 # Development support
 FA_DoExec apt-get install \
     vim dos2unix minicom gawk
 [[/code]]
 [[/collapsible]]

 ++ 安装生成系统镜像文件所需的工具

 为了生成系统镜像{{system.img}}，需要安装mkimage工具：

[[code]]
 cd '/mnt/hgfs/Shared/iTOP-4412精英版光盘资料/02_编译器以及烧写工具/tools/'
 cp ./linux_tools.tgz /
 cd /
 tar -vxf linux_tools.tgz
 [[/code]]

至此，Qt/E 4.7.1编译和镜像构建环境搭建完毕。

+ 复制和展开Qt/E 4.7.1源代码

 继续使用Root身份操作，在{{/root/}}目录下建立{{yizhi}}目录，请注意，建议不要使用别的目录名称。

 随后，复制ARM版本的Qt/E 4.7.1源码文件并展开：

[[code]]
 cd /root/
 mkdir yizhi
 cd yizhi
 cp '/mnt/hgfs/Shared/iTOP-4412精英版光盘资料/08_源码_QtE以及qtopia2.2.0文件系统/qt-everywhere-opensource-src-4.7.1_20141224.tar.gz' ./
 tar -vxf qt-everywhere-opensource-src-4.7.1_20141224.tar.gz
 [[/code]]

 + 修改Qt/E 4.7.1编译参数

 建议再次检查各环环境配是否正确，并确保当前位于{{/root/yizhi/qt-everywhere-opensource-src-4.7.1}}目录内，输入以下指令，编辑编译脚本文件{{build-all}}：

[[code]]
 cd /root/yizhi/qt-everywhere-opensource-src-4.7.1/
 sudo gedit build-all
 [[/code]]

找到{{echo yes | ./configure ...}}行，并在{{./configure}}后添加开关{{-qt-kbd-linuxinput}}，使其看起来像：

[[code]]
 echo yes | ./configure -opensource -embedded arm -xplatform qws/linux-arm-g++  -no-webkit -qt-libtiff -qt-libmng -qt-kbd-linuxinput -qt-mouse-tslib -qt-mouse-pc -qt-gfx-transformed -no-mouse-linuxtp -prefix /opt/qt-4.7.1   -I /usr/local/tslib/include -L /usr/local/tslib/lib
 [[/code]]

随后，保存并退出。

+ 编译Qt/E 4.7.1源代码

 建议再次检查各环环境配是否正确，并确保当前位于{{/root/yizhi/qt-everywhere-opensource-src-4.7.1}}目录内，运行编译脚本：

[[code]]
 cd /root/yizhi/qt-everywhere-opensource-src-4.7.1/
 ./build-all
 [[/code]]

编译时间可能较长。编译得到的文件位于{{/opt}}目录中。

+ 生成系统映像文件

 从这里开始可以退出Root操作环境，亦可继续留在Root操作环境。为便于操作以及后续代码修改，此处选择退出Root操作环境，并在登录用户目录内进行处理：

[[code]]
 cd /home/picsell-dois/iTop4412/
 mkdir Qtopia
 cd Qtopia
 cp '/mnt/hgfs/Shared/iTOP-4412精英版光盘资料/08_源码_QtE以及qtopia2.2.0文件系统/root_2020115.tar.gz' ./
 tar -vxf root_2020115.tar.gz
 [[/code]]

请注意：不同的版本的“{{root_@@********@@.tar.gz}}”中的日期项的值可能不同。

 随后，导出编译得到的文件，并生成镜像文件：

[[code]]
 cd /home/picsell-dois/iTop4412/Qtopia/
 cp -r /opt/qt-4.7.1 /home/picsell-dois/iTop4412/Qtopia/root/opt
 make_ext4fs -s -l 314572800 -a root -L linux system.img root
 [[/code]]

执行完毕后，在{{/home/picsell-dois/iTop4412/Qtopia/}}目录下即可得到{{system.img}}镜像文件。

+ 修改Qt/E 4.7.1配置文件以启用矩阵键盘

 将{{system.img}}镜像文件刷入设备后，在超级终端输入：

[[code]]
 vi /bin/qt4
 [[/code]]

按{{i}}键进入插入编辑模式，将{{export QWS_KEYBOARD=}}行解除注释（即删除行首的井号（“{{#}}”）），并将其内容改为：

[[code]]
 export QWS_KEYBOARD="USB:/dev/input/event1"
 [[/code]]

按{{ESC}}键并输入{{:wq}}后按回车执行保存操作，重启设备即可。

 如果需要重建{{system.img}}镜像，也可以在先前解包{{root_@@********@@.tar.gz}}得到的{{root}}目录中编辑{{/bin/qt4}}文件：

[[code]]
 sudo gedit '/home/picsell-dois/iTop4412/Qtopia/root/bin/qt4'
 [[/code]]

完成后，回到终端执行：

[[code]]
 cd /home/picsell-dois/iTop4412/Qtopia/
 rm system.img
 make_ext4fs -s -l 314572800 -a root -L linux system.img root
 [[/code]]

重建{{system.img}}并执行刷写流程即可。 